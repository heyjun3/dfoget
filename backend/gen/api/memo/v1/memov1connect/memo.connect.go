// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/memo/v1/memo.proto

package memov1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/heyjun3/dforget/backend/gen/api/memo/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MemoServiceName is the fully-qualified name of the MemoService service.
	MemoServiceName = "api.memo.v1.MemoService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MemoServiceRegisterMemoProcedure is the fully-qualified name of the MemoService's RegisterMemo
	// RPC.
	MemoServiceRegisterMemoProcedure = "/api.memo.v1.MemoService/RegisterMemo"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	memoServiceServiceDescriptor            = v1.File_api_memo_v1_memo_proto.Services().ByName("MemoService")
	memoServiceRegisterMemoMethodDescriptor = memoServiceServiceDescriptor.Methods().ByName("RegisterMemo")
)

// MemoServiceClient is a client for the api.memo.v1.MemoService service.
type MemoServiceClient interface {
	RegisterMemo(context.Context, *connect.Request[v1.RegisterMemoRequest]) (*connect.Response[v1.RegisterMemoResponse], error)
}

// NewMemoServiceClient constructs a client for the api.memo.v1.MemoService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMemoServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MemoServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &memoServiceClient{
		registerMemo: connect.NewClient[v1.RegisterMemoRequest, v1.RegisterMemoResponse](
			httpClient,
			baseURL+MemoServiceRegisterMemoProcedure,
			connect.WithSchema(memoServiceRegisterMemoMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// memoServiceClient implements MemoServiceClient.
type memoServiceClient struct {
	registerMemo *connect.Client[v1.RegisterMemoRequest, v1.RegisterMemoResponse]
}

// RegisterMemo calls api.memo.v1.MemoService.RegisterMemo.
func (c *memoServiceClient) RegisterMemo(ctx context.Context, req *connect.Request[v1.RegisterMemoRequest]) (*connect.Response[v1.RegisterMemoResponse], error) {
	return c.registerMemo.CallUnary(ctx, req)
}

// MemoServiceHandler is an implementation of the api.memo.v1.MemoService service.
type MemoServiceHandler interface {
	RegisterMemo(context.Context, *connect.Request[v1.RegisterMemoRequest]) (*connect.Response[v1.RegisterMemoResponse], error)
}

// NewMemoServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMemoServiceHandler(svc MemoServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	memoServiceRegisterMemoHandler := connect.NewUnaryHandler(
		MemoServiceRegisterMemoProcedure,
		svc.RegisterMemo,
		connect.WithSchema(memoServiceRegisterMemoMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.memo.v1.MemoService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MemoServiceRegisterMemoProcedure:
			memoServiceRegisterMemoHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMemoServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMemoServiceHandler struct{}

func (UnimplementedMemoServiceHandler) RegisterMemo(context.Context, *connect.Request[v1.RegisterMemoRequest]) (*connect.Response[v1.RegisterMemoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.memo.v1.MemoService.RegisterMemo is not implemented"))
}
